openapi: 3.0.0
info:
  title: Shopping List MCP Server
  description: A Model Context Protocol server for managing shopping lists and recipes
  version: 1.0.0
servers:
  - url: http://localhost:8001
    description: Local development server

paths:
  /remove_ingredients:
    post:
      summary: Remove ingredients from shopping list
      description: Remove specified ingredients from the shopping list. Ingredients not present are ignored.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ingredients
              properties:
                ingredients:
                  type: array
                  items:
                    type: string
                  example: ["Cibule", "Máslo", "Neexistuje"]
      responses:
        "200":
          description: Ingredients removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  shopping_list:
                    type: array
                    items:
                      type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /get_recipes:
    get:
      summary: Get all recipes with pagination
      description: Returns a paginated list of all available recipes (10 recipes per page)
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
      responses:
        "200":
          description: A paginated list of recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recipe"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"

  /get_all_ingredients:
    get:
      summary: Get all ingredients
      description: Returns a list of all unique ingredients from all recipes
      responses:
        "200":
          description: A list of all unique ingredients
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of unique ingredients
                    example: 125
                  ingredients:
                    type: array
                    items:
                      type: string
                    description: Sorted list of all unique ingredients
                    example: [
                      "Badyán",
                      "Bobkový list",
                      "Cibule",
                      "Citron",
                      "Cukr krupice",
                    ]

  /get_all_diets:
    get:
      summary: Get all diet types
      description: Returns a list of all unique diet types from all recipes
      responses:
        "200":
          description: A list of all unique diet types
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of unique diet types
                    example: 8
                  diets:
                    type: array
                    items:
                      type: string
                    description: Sorted list of all unique diet types
                    example: [
                      "bezlepkové",
                      "high-protein",
                      "low-carb",
                      "masité",
                      "tučné",
                    ]

  /get_recipe_names:
    get:
      summary: Get all recipe names
      description: Returns a list of all recipe names from all recipes
      responses:
        "200":
          description: A list of all recipe names
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of recipes
                    example: 100
                  recipe_names:
                    type: array
                    items:
                      type: string
                    description: Sorted list of all recipe names
                    example: [
                      "Alaskaská pizza",
                      "Asijský burger",
                      "Bramboračka",
                      "Karbanátky",
                      "Špagety Carbonara",
                    ]

  /search_recipes:
    get:
      summary: Search recipes with pagination
      description: Search recipes by diet, meal type, name, and/or ingredient filters with pagination (10 recipes per page)
      parameters:
        - name: diet
          in: query
          description: Filter recipes by diet category (e.g., vegetarian, vegan, high-protein)
          required: false
          schema:
            type: string
        - name: meal_type
          in: query
          description: Filter recipes by meal type (e.g., polévka, hlavní chod, desert)
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Search recipes by name (partial match)
          required: false
          schema:
            type: string
        - name: includes_ingredients
          in: query
          description: Comma-separated list of ingredients that must be present in the recipe
          required: false
          schema:
            type: string
            example: "Cibule,Máslo,Česnek"
        - name: excludes_ingredients
          in: query
          description: Comma-separated list of ingredients that must NOT be present in the recipe
          required: false
          schema:
            type: string
            example: "Mléko,Vejce"
        - name: page
          in: query
          description: Page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
      responses:
        "200":
          description: Search results with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recipe"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        "400":
          description: Bad request - missing search parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Please provide at least one search parameter: 'diet', 'meal_type', 'name', 'includes_ingredients', or 'excludes_ingredients'"

  /add_ingredients:
    post:
      summary: Add ingredients to shopping list
      description: Add multiple ingredients to the shopping list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ingredients
              properties:
                ingredients:
                  type: array
                  items:
                    type: string
                  example: ["Mléko", "Cibule", "Chléb"]
      responses:
        "200":
          description: Ingredients added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "3 ingredients added"
                  shopping_list:
                    type: array
                    items:
                      type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /get_shopping_list:
    get:
      summary: Get current shopping list
      description: Returns the current shopping list
      responses:
        "200":
          description: Current shopping list
          content:
            application/json:
              schema:
                type: object
                properties:
                  shopping_list:
                    type: array
                    items:
                      type: string

  /clear_shopping_list:
    post:
      summary: Clear shopping list
      description: Remove all items from the shopping list
      responses:
        "200":
          description: Shopping list cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Shopping list cleared"

components:
  schemas:
    Recipe:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the recipe
        name:
          type: string
          description: Name of the recipe
        ingredients:
          type: array
          items:
            type: string
          description: List of ingredients needed for the recipe
        steps:
          type: string
          description: Cooking instructions
        diet:
          type: array
          items:
            type: string
          description: Diet categories (e.g., vegetarian, vegan, high-protein)
        meal_type:
          type: array
          items:
            type: string
          description: Meal type categories (e.g., polévka, hlavní chod, desert)
      required:
        - id
        - name
        - ingredients
        - steps
        - diet
        - meal_type

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        per_page:
          type: integer
          description: Number of items per page (fixed at 10)
          example: 10
        total:
          type: integer
          description: Total number of items available
          example: 37
        total_pages:
          type: integer
          description: Total number of pages available
          example: 4
        has_next:
          type: boolean
          description: Whether there is a next page available
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page available
          example: false
      required:
        - page
        - per_page
        - total
        - total_pages
        - has_next
        - has_prev
